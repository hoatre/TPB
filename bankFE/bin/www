#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bankFE:server');
var http = require('http');
var commonConfig = require('../config/common');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || commonConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Begin -Phong
const redis = require('redis');
const client1 = redis.createClient(); // redis server
//const client1 = redis.createClient(6379, commonConfig.serverRedis, {}); // redis server
log('info', 'connected to redis server');

var io = require('socket.io').listen(server);

console.log('Server running the port: ' + port);

//End

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'), function () {
    console.log("Express server listening on port " + app.get('port'));
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}



//Begin - Phong

var mongoskin = require('mongoskin');
var db = mongoskin.db(commonConfig.serverMongo, {safe:true});
var t1, t2, t3,t4,t5,t6;
var channelCode = [];
var transactionCode = [];
var transactionCodeJson = [];
var productType = [];
var productTypeJson = [];
var list = [];

//Get list Channels from DB
function GetChannelList()
{
    var Channels = db.collection('Channels'); // ten bang
    Channels.find().toArray(function(error, channels) {
        if (error) return next(error);
        if (!channels) return next(new Error('Get all channel fail.'));
        channelCode = channels.map(function(item){
            var text = '{"ChannelCode":"' + item.ChannelCode + '", "ChannelName":"' + item.ChannelName + '", "ChannelAddress":"' + item.ChannelAddress + '", "Display":"' + "0" +'", "Count":"' + "0" +'", "Sum":"' + "0" + '"}';
            return text;
        })
    });
}
GetChannelList();

//Get list TranSactionType from DB
function GetTransactionList()
{
    var TransactionTypes = db.collection('TransactionTypes'); // ten bang
    TransactionTypes.find().toArray(function(error, transactionTypes) {
        if (error) return next(error);
        if (!transactionTypes) return next(new Error('Get all channel fail.'));

        transactionCode = transactionTypes.map(function(item){
            return item.TransactionCode;
        })

    });

}
GetTransactionList();
function GetTransactionListJson()
{
    var TransactionTypes = db.collection('TransactionTypes'); // ten bang
    TransactionTypes.find().toArray(function(error, transactionTypes) {
        if (error) return next(error);
        if (!transactionTypes) return next(new Error('Get all transactionTypes fail.'));
        transactionCodeJson = transactionTypes.map(function(item){
            var text = '{"TransactionCode":"' + item.TransactionCode + '", "TransactionName":"' + item.TransactionName+ '"}';
            return text;
        })
    });

}

GetTransactionListJson();

//Get list ProductType from DB
function GetProductList()
{
    var Products = db.collection('Products'); // ten bang
    Products.find().toArray(function(error, Products) {
        if (error) return next(error);
        if (!Products) return next(new Error('Get all channel fail.'));
        var list = [];
        list = Products.map(function(item){
            return item.ProductType;
        })
        productType = list.filter(function(item, pos) {
            return list.indexOf(item) == pos;
        })
    });

}
GetProductList();

function GetProductListJson()
{
    var Products = db.collection('Products'); // ten bang
    Products.find().toArray(function(error, products) {
        if (error) return next(error);
        if (!products) return next(new Error('Get all products fail.'));
        productTypeJson = products.map(function(item){
            var text = '{"ProductCode":"' + item.ProductType + '", "ProductName":"' + item.ProductType+ '"}';
            return text;
        })
    });

}
GetProductListJson();

//Get data for Pie Chart
function GetDataPieChart(year, socket)
{
    var ReportProductYears = db.collection('ReportProductYears'); // ten bang
    var dataColumnChart = [];
    ReportProductYears.find({Year:year}).toArray(function(error, ReportProductYears) {
        if (error) return next(error);
        if (!ReportProductYears) return next(new Error('Get all ReportProductYears fail.'));
        dataColumnChart = ReportProductYears.map(function(item){
            return '{"ProductType":"' + item.ProductType + '", "Year":"' + item.Year + '", "Count":"' + item.Count + '"}';
        })
        socket.emit('GetDataPieChart', dataColumnChart);
    });

}

//Get data for Column Chart
function GetDataColumnChart(channel, year, socket)
{
    var ReportChannelYears = db.collection('ReportChannelYears'); // ten bang
    var dataColumnChart = [];
    ReportChannelYears.find({ChannelCode:channel, Year:year}).toArray(function(error, ReportChannelYears) {
        if (error) return next(error);
        if (!ReportChannelYears) return next(new Error('Get all ReportChannelYears fail.'));
        dataColumnChart = ReportChannelYears.map(function(item){
            return '{"ChannelCode":"' + item.ChannelCode + '", "ChannelName":"' + item.ChannelName + '", "ChannelAddress":"' + item.ChannelAddress + '", "Month":"' + item.Month + '", "Year":"' + item.Year + '", "Count":"' + item.Count +'", "Amount":"' + item.Amount + '"}';
        })
        socket.emit('GetDataColumnChart', dataColumnChart);

    });

}

//save data ColumnChart
function SaveDataColumnChart(year, month, ChannelCode, ChannelName, ChannelAddress, amount, count){
    log('info', "SaveDataColumnChart begin");
    var ReportChannelYears = db.collection('ReportChannelYears'); // ten bang
    var document = {ChannelCode:ChannelCode, ChannelName:ChannelName, ChannelAddress:ChannelAddress, Year:year.toString(), Month:month.toString(), Amount:amount, Count:count};
    ReportChannelYears.insert(document, {w: 1}, function(err, records){

    });
    log('info', "SaveDataColumnChart done");
}

//save data PieChart
function SaveDataPieChart(productType, year, count){
    log('info', "SaveDataPieChart begin");
    var ReportProductYears = db.collection('ReportProductYears'); // ten bang
    var document = {ProductType:productType, Year:year.toString(), Count:count};
    ReportProductYears.insert(document, {w: 1}, function(err, records){

    });
    log('info', "SaveDataPieChart done");
}

//Ramdom Int
function randomInt (low, high) {
    return Math.floor(Math.random() * (parseInt(high) - parseInt(low)) + parseInt(low));
}
//show log
function log(type, msg) {

    var color   = '\u001b[0m',
        reset = '\u001b[0m';

    switch(type) {
        case "info":
            color = '\u001b[36m';
            break;
        case "warn":
            color = '\u001b[33m';
            break;
        case "error":
            color = '\u001b[31m';
            break;
        case "msg":
            color = '\u001b[34m';
            break;
        default:
            color = '\u001b[0m'
    }

    console.log(color + '   ' + type + '  - ' + reset + msg);
}

function redis_hmget_top(key, socket){
    client1.get(key, function (err, items) {
        if (err) {
            log('error', "error");
        } else {
            socket.emit('emitRanking-' + key, items);
            //log('info', items);
        }

    });
}

function callLIndex(callback, key, i) {
    client1.lindex(key, i, function(err, result) {
        if (err) {
            log('error', "error");
        } else {
            callback(err, result)
        }
    });
}

function redis_lrange(key, socket){
    console.log('key: '+key);
    client1.llen(key, function(err, items){
	
        client1.lrange(key, 0, parseInt(items), function(err, items2) {
            if (err) {
                log('error', "error");
            } else {
                socket.emit('listChart-' + key,items2);
            }
        });
    });
}

// open socket theo time
io.sockets.on('disconnect',function(socket){
    console.log('Disconnect socket!!!')
});

io.sockets.on('connection',function(socket){
    console.log('Connection socket!!!')
    socket.emit('listChannelCode',channelCode);
    //console.log("----------------"+transactionCodeJson.length);
    socket.emit('listTransactionCode',transactionCode);
    socket.emit('listTransactionCodeJson',transactionCodeJson);
    socket.emit('listProductType',productType);
    socket.emit('listProductTypeJson',productTypeJson);
    socket.on('EventComboboxColumn', function (data1) {
        GetDataColumnChart(data1[0], data1[1], socket);
    }),
        socket.on('EventComboboxPie', function (data1) {
            GetDataPieChart(data1[0], socket);
        }),

        redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('Sliding-data-' + commonConfig.SlidingTimeMinute, socket);
    t1 = setInterval(function() {
        GetBotTop(commonConfig.SlidingTimeMinute, socket);
        GetBotTop(commonConfig.SlidingTimeDay, socket);
        GetBotTop(commonConfig.SlidingTimeHour, socket);
        redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('Sliding-data-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeMinute, socket);
    }, commonConfig.SlidingTimeDelayMinute);

    redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeHour, socket);
    redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeHour, socket);
    redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeHour, socket);
    redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeHour, socket);
    redis_lrange('Sliding-data-' + commonConfig.SlidingTimeHour, socket);
    GetBotTop(commonConfig.SlidingTimeHour, socket);
    t2 = setInterval(function() {
        redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeHour, socket);
        redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeHour, socket);
        redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeHour, socket);
        redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeHour, socket);
        redis_lrange('Sliding-data-' + commonConfig.SlidingTimeHour, socket);
    }, commonConfig.SlidingTimeDelayHour);

    redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeDay, socket);
    redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeDay, socket);
    redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeDay, socket);
    redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeDay, socket);
    redis_lrange('Sliding-data-' + commonConfig.SlidingTimeDay, socket);
    GetBotTop(commonConfig.SlidingTimeDay, socket);
    t3 = setInterval(function() {
        redis_lrange('Sliding-data-' + commonConfig.SlidingTimeDay, socket);
        redis_lrange('real-time-count-chart-window-' + commonConfig.SlidingTimeDay, socket);
        redis_lrange('real-time-count-chart-' + commonConfig.SlidingTimeDay, socket);
        redis_lrange('real-time-sum-chart-tran-' + commonConfig.SlidingTimeDay, socket);
        redis_lrange('real-time-count-chart-tran-' + commonConfig.SlidingTimeDay, socket);
    }, commonConfig.SlidingTimeDelayDay);

    //set timeout 1 minute
    t4 = setInterval(function() {

        redis_lrange('real-time-count-tran-' + commonConfig.SlidingTimeMinute, socket);
        redis_lrange('real-time-count-product-' + commonConfig.SlidingTimeMinute, socket);
	
    }, commonConfig.SlidingTimeDelayMinute);
    //set timeout 1 hour
    redis_lrange('real-time-count-tran-' + commonConfig.SlidingTimeHour, socket);
    redis_lrange('real-time-count-product-' + commonConfig.SlidingTimeHour, socket);
    t5 = setInterval(function() {
	redis_lrange('real-time-count-tran-' + commonConfig.SlidingTimeHour, socket);
        redis_lrange('real-time-count-product-' + commonConfig.SlidingTimeHour, socket);
	
    }, commonConfig.SlidingTimeDelayHour);
    //set timeout 1 day
    redis_lrange('real-time-count-tran-' + commonConfig.SlidingTimeDay, socket);
    redis_lrange('real-time-count-product-' + commonConfig.SlidingTimeDay, socket);
    t6 = setInterval(function() {
	redis_lrange('real-time-count-tran-' + commonConfig.SlidingTimeDay, socket);
        redis_lrange('real-time-count-product-' + commonConfig.SlidingTimeDay, socket);

    }, commonConfig.SlidingTimeDelayDay);
    socket.on('BuidDataOff',function(data){
	console.log('BuidDataOff');
	loadtransactionchart('real-time-count-chart-' + commonConfig.SlidingTimeMinute, socket);
    });
});

// get ranking acc trong redis
function GetBotTop(slidingTime, socket){
    //log('info', transactionCode.length);
    var channelCodeI = JSON.parse('[' + channelCode + ']');
    for(i=0; i<transactionCode.length; i++)
    {
        redis_hmget_top('Ranking-' + transactionCode[i] + '-' + slidingTime, socket);
    }
}


function loadtransactionchart(key,socket)
{
    client1.llen(key, function(err, items){
	
        client1.lrange(key, 0, parseInt(items), function(err, items2) {
            if (err) {
                log('error', "error");
            } else {
		console.log('key: '+key);
                socket.emit('loadtransactionchart-' + key,items2);
            }
        });
    });
}
//End. 
